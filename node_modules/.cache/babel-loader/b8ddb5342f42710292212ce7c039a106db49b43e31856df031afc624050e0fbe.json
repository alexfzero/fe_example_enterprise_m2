{"ast":null,"code":"export function getUserToken() {\n  return localStorage.getItem('user-tocken');\n}\nexport function getHttpHeaders() {\n  let headers = {\n    'Content-Type': 'application/json'\n  };\n  if (getUserToken()) headers['Authorization'] = 'Token ' + getUserToken();\n  // console.log(headers)\n  return headers;\n}\nexport function makeGetRequest(url) {\n  let headers = getHttpHeaders();\n  return fetch(url, {\n    headers: headers,\n    method: 'GET'\n  });\n}\nexport function makePostRequest(url, data, method) {\n  let headers = getHttpHeaders();\n  if (!method) method = 'POST';\n  return fetch(url, {\n    headers: headers,\n    method: method,\n    body: JSON.stringify(data)\n  });\n}\nexport function makeUpdateRequest(url, data) {\n  let headers = getHttpHeaders();\n  return fetch(url, {\n    headers: headers,\n    method: 'PUT',\n    body: JSON.stringify(data)\n  });\n}\nexport function makeParticalUpdateRequest(url, data) {\n  return makePostRequest(url, data, \"PATCH\");\n}\nexport function makeDeleteRequest(url) {\n  let headers = getHttpHeaders();\n  return fetch(url, {\n    headers: headers,\n    method: 'DELETE'\n  });\n}\nexport function addGetParameters(url, parameters) {\n  /**\n   * Добавление к адресу гет параметры\n   *\n   * @param {string} url - адресс к которому добавляются гет параметры\n   * @param {Map} parameters - словарь добавляемых параметров, где ключ название параметра а значаение это добавляемое значение\n   * @type {Array}\n   */\n  let urlObject = new URL(url);\n  for (let el of Object.keys(parameters)) {\n    if (parameters[el] === undefined || parameters[el] == null) urlObject.searchParams.delete(el);else urlObject.searchParams.set(el, parameters[el]);\n  }\n  return urlObject.toString();\n}","map":{"version":3,"names":["getUserToken","localStorage","getItem","getHttpHeaders","headers","makeGetRequest","url","fetch","method","makePostRequest","data","body","JSON","stringify","makeUpdateRequest","makeParticalUpdateRequest","makeDeleteRequest","addGetParameters","parameters","urlObject","URL","el","Object","keys","undefined","searchParams","delete","set","toString"],"sources":["/home/alex/gitProjects/fe_be_mk_example_enterprise/fe_example_enterprise_m2/src/helper/index.js"],"sourcesContent":["export function getUserToken() {\n    return localStorage.getItem('user-tocken')\n}\n\nexport function getHttpHeaders() {\n    let headers = {\n        'Content-Type': 'application/json',\n    }\n    if (getUserToken())\n        headers['Authorization'] = 'Token ' + getUserToken()\n    // console.log(headers)\n    return headers\n}\n\nexport function makeGetRequest(url) {\n    let headers = getHttpHeaders();\n    return fetch(url, {\n        headers: headers,\n        method: 'GET'\n    })\n}\n\nexport function makePostRequest(url, data, method) {\n    let headers = getHttpHeaders()\n    if (!method)\n        method = 'POST'\n    return fetch(url, {\n        headers: headers,\n        method: method,\n        body: JSON.stringify(data),\n    });\n}\n\nexport function makeUpdateRequest(url, data) {\n    let headers = getHttpHeaders()\n    return fetch(url, {\n        headers: headers,\n        method: 'PUT',\n        body: JSON.stringify(data),\n    });\n}\n\nexport function makeParticalUpdateRequest(url, data) {\n    return makePostRequest(url, data, \"PATCH\")\n}\n\nexport function makeDeleteRequest(url) {\n    let headers = getHttpHeaders()\n    return fetch(url, {\n        headers: headers,\n        method: 'DELETE',\n    });\n}\n\nexport function addGetParameters(url, parameters) {\n    /**\n     * Добавление к адресу гет параметры\n     *\n     * @param {string} url - адресс к которому добавляются гет параметры\n     * @param {Map} parameters - словарь добавляемых параметров, где ключ название параметра а значаение это добавляемое значение\n     * @type {Array}\n     */\n    let urlObject = new URL(url);\n    for (let el of Object.keys(parameters)) {\n        if (parameters[el] === undefined || parameters[el] == null)\n            urlObject.searchParams.delete(el)\n        else\n            urlObject.searchParams.set(el, parameters[el])\n    }\n    return urlObject.toString();\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAY,GAAG;EAC3B,OAAOC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;AAC9C;AAEA,OAAO,SAASC,cAAc,GAAG;EAC7B,IAAIC,OAAO,GAAG;IACV,cAAc,EAAE;EACpB,CAAC;EACD,IAAIJ,YAAY,EAAE,EACdI,OAAO,CAAC,eAAe,CAAC,GAAG,QAAQ,GAAGJ,YAAY,EAAE;EACxD;EACA,OAAOI,OAAO;AAClB;AAEA,OAAO,SAASC,cAAc,CAACC,GAAG,EAAE;EAChC,IAAIF,OAAO,GAAGD,cAAc,EAAE;EAC9B,OAAOI,KAAK,CAACD,GAAG,EAAE;IACdF,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAE;EACZ,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,eAAe,CAACH,GAAG,EAAEI,IAAI,EAAEF,MAAM,EAAE;EAC/C,IAAIJ,OAAO,GAAGD,cAAc,EAAE;EAC9B,IAAI,CAACK,MAAM,EACPA,MAAM,GAAG,MAAM;EACnB,OAAOD,KAAK,CAACD,GAAG,EAAE;IACdF,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAEA,MAAM;IACdG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC7B,CAAC,CAAC;AACN;AAEA,OAAO,SAASI,iBAAiB,CAACR,GAAG,EAAEI,IAAI,EAAE;EACzC,IAAIN,OAAO,GAAGD,cAAc,EAAE;EAC9B,OAAOI,KAAK,CAACD,GAAG,EAAE;IACdF,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAE,KAAK;IACbG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC7B,CAAC,CAAC;AACN;AAEA,OAAO,SAASK,yBAAyB,CAACT,GAAG,EAAEI,IAAI,EAAE;EACjD,OAAOD,eAAe,CAACH,GAAG,EAAEI,IAAI,EAAE,OAAO,CAAC;AAC9C;AAEA,OAAO,SAASM,iBAAiB,CAACV,GAAG,EAAE;EACnC,IAAIF,OAAO,GAAGD,cAAc,EAAE;EAC9B,OAAOI,KAAK,CAACD,GAAG,EAAE;IACdF,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAE;EACZ,CAAC,CAAC;AACN;AAEA,OAAO,SAASS,gBAAgB,CAACX,GAAG,EAAEY,UAAU,EAAE;EAC9C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,SAAS,GAAG,IAAIC,GAAG,CAACd,GAAG,CAAC;EAC5B,KAAK,IAAIe,EAAE,IAAIC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,EAAE;IACpC,IAAIA,UAAU,CAACG,EAAE,CAAC,KAAKG,SAAS,IAAIN,UAAU,CAACG,EAAE,CAAC,IAAI,IAAI,EACtDF,SAAS,CAACM,YAAY,CAACC,MAAM,CAACL,EAAE,CAAC,MAEjCF,SAAS,CAACM,YAAY,CAACE,GAAG,CAACN,EAAE,EAAEH,UAAU,CAACG,EAAE,CAAC,CAAC;EACtD;EACA,OAAOF,SAAS,CAACS,QAAQ,EAAE;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}