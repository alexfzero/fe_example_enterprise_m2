{"ast":null,"code":"import FormErrorsMixin from \"@/mixins/FormErrorsMixin\";\nimport { makeGetRequest, makePostRequest, makeUpdateRequest } from \"@/helper\";\nimport models from \"@/urls/models\";\nimport roles from \"@/urls/roles\";\nimport selectors from \"@/urls/selectors\";\nimport ScrollCenterDialog from \"@/modules/templates/ScrollCenterDialog.vue\";\nexport default {\n  name: \"FundsEditForm\",\n  components: {\n    ScrollCenterDialog\n  },\n  mixins: [FormErrorsMixin],\n  props: {\n    opened: Boolean,\n    edit: Boolean,\n    flowData: Object\n  },\n  data() {\n    return {\n      URL_CONT: selectors.API + selectors.REFERENCES.CONTRACTS,\n      URL_FUND: models.API + roles.SUPER_ADMIN + models.REFERENCES.NAME + models.REFERENCES.PATH.FUNDS,\n      loading: false,\n      flow_fund: {\n        number: undefined,\n        contract: undefined,\n        name: undefined,\n        currency: undefined,\n        value: undefined,\n        came_from: undefined\n      },\n      contracts: undefined,\n      save_loading: false\n    };\n  },\n  methods: {\n    close() {\n      this.$emit('close', false);\n    },\n    save() {\n      let data = {};\n      for (let key in this.flow_fund) {\n        data[key] = this.flow_fund[key];\n      }\n      console.log('save()', data);\n      if (this.edit) {\n        let id = this.flowData.id;\n        this.changeFund(data, id);\n      } else {\n        this.createFund(data);\n      }\n    },\n    getContracts() {\n      makeGetRequest(this.URL_CONT).then(resp => resp.json()).then(data => {\n        this.contracts = data;\n      });\n    },\n    createFund(data) {\n      makePostRequest(this.URL_FUND, data);\n      setTimeout(() => {\n        this.save_loading = false;\n        this.$emit('close', this.flow_fund);\n      }, 800);\n    },\n    changeFund(data, id) {\n      let url_id = id + '/';\n      makeUpdateRequest(this.URL_FUND + url_id, data);\n      setTimeout(() => {\n        this.save_loading = false;\n        this.$emit('close', this.flow_fund);\n      }, 800);\n    },\n    load_edit_item() {\n      if (this.flowData) {\n        console.log(this.flowData);\n        for (let key in this.flowData) {\n          if (key in this.flow_fund) this.flow_fund[key] = this.flowData[key];\n        }\n      }\n    }\n  },\n  created() {\n    this.getContracts();\n    this.load_edit_item();\n  },\n  computed: {\n    form_title() {\n      return this.edit === false ? 'Добавить движение средств' : 'Редактировать движение средств';\n    }\n  }\n};","map":{"version":3,"mappings":"AA6DA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IAAAC;EAAA;EACAC;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAd;QACAe;QACAC;QACAC;MACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;MACA;QACAd;MACA;MACAe;MAEA;QACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACAC,8BACAC,0BACAA;QACA;MACA;IACA;IACAC;MACAC;MACAC;QACA;QACA;MACA;IACA;IACAC;MACA;MACAC;MACAF;QACA;QACA;MACA;IACA;IACAG;MACA;QACAT;QACA;UACA,2BACA;QACA;MACA;IACA;EACA;EAEAU;IACA;IACA;EACA;EACAC;IACAC;MACA;IACA;EACA;AACA","names":["name","components","ScrollCenterDialog","mixins","props","opened","edit","flowData","data","URL_CONT","URL_FUND","loading","flow_fund","number","contract","currency","value","came_from","contracts","save_loading","methods","close","save","console","getContracts","makeGetRequest","then","createFund","makePostRequest","setTimeout","changeFund","makeUpdateRequest","load_edit_item","created","computed","form_title"],"sourceRoot":"src/modules/admin/fund","sources":["FundsEditForm.vue"],"sourcesContent":["<template>\n  <scroll-center-dialog\n      v-model=\"\n      /* eslint-disable-next-line vue/no-mutating-props */\n      opened\"\n      :loading=\"save_loading\"\n      width=\"600\"\n      @close=\"close\"\n      @apply=\"save\"\n      :title=\"form_title\"\n      :scrolled=\"false\"\n  >\n    <v-text-field\n        v-model=\"flow_fund.number\"\n        label=\"Номер\"\n        :error=\"hasError('number')\"\n        :errorMessages=\"getError('number')\"\n        class=\"mb-n2\"\n    ></v-text-field>\n    <v-autocomplete\n        class=\"mt-4\"\n        v-model=\"flow_fund.contract\"\n        :items=\"contracts\"\n        item-value=\"value\"\n        item-text=\"text\"\n        label=\"Контракт\"\n        :error=\"hasError('contract')\"\n        :errorMessages=\"getError('contract')\"\n    ></v-autocomplete>\n    <v-text-field\n        v-model=\"flow_fund.name\"\n        label=\"Наименование\"\n        :error=\"hasError('name')\"\n        :errorMessages=\"getError('name')\"\n        class=\"mb-n2\"\n    ></v-text-field>\n    <v-text-field\n        v-model=\"flow_fund.currency\"\n        label=\"Валюта\"\n        :error=\"hasError('currency')\"\n        :errorMessages=\"getError('currency')\"\n        class=\"mb-n2\"\n    ></v-text-field>\n    <v-text-field\n        v-model=\"flow_fund.value\"\n        label=\"Значение\"\n        :error=\"hasError('value')\"\n        :errorMessages=\"getError('value')\"\n        class=\"mb-n2\"\n    ></v-text-field>\n    <v-text-field\n        v-model=\"flow_fund.came_from\"\n        label=\"От\"\n        :error=\"hasError('came_from')\"\n        :errorMessages=\"getError('came_from')\"\n        class=\"mb-n2\"\n    ></v-text-field>\n  </scroll-center-dialog>\n</template>\n\n<script>\nimport FormErrorsMixin from \"@/mixins/FormErrorsMixin\"\nimport {makeGetRequest, makePostRequest, makeUpdateRequest} from \"@/helper\";\nimport models from \"@/urls/models\";\nimport roles from \"@/urls/roles\";\nimport selectors from \"@/urls/selectors\";\nimport ScrollCenterDialog from \"@/modules/templates/ScrollCenterDialog.vue\";\n\nexport default {\n  name: \"FundsEditForm\",\n  components: {ScrollCenterDialog},\n  mixins: [FormErrorsMixin],\n  props: {\n    opened: Boolean,\n    edit: Boolean,\n    flowData: Object,\n  },\n  data() {\n    return {\n      URL_CONT: selectors.API + selectors.REFERENCES.CONTRACTS,\n      URL_FUND: models.API + roles.SUPER_ADMIN + models.REFERENCES.NAME + models.REFERENCES.PATH.FUNDS,\n      loading: false,\n      flow_fund: {\n        number: undefined,\n        contract: undefined,\n        name: undefined,\n        currency: undefined,\n        value: undefined,\n        came_from: undefined,\n      },\n      contracts: undefined,\n      save_loading:false,\n    }\n  },\n  methods: {\n    close() {\n      this.$emit('close', false)\n    },\n    save() {\n      let data = {}\n      for (let key in this.flow_fund) {\n        data[key] = this.flow_fund[key]\n      }\n      console.log('save()', data)\n\n      if (this.edit) {\n        let id = this.flowData.id\n        this.changeFund(data, id)\n      } else {\n        this.createFund(data)\n      }\n    },\n    getContracts() {\n      makeGetRequest(this.URL_CONT)\n          .then(resp => resp.json())\n          .then(data => {\n            this.contracts = data\n          })\n    },\n    createFund(data) {\n      makePostRequest(this.URL_FUND, data)\n      setTimeout(() => {\n        this.save_loading = false\n        this.$emit('close', this.flow_fund)\n      }, 800)\n    },\n    changeFund(data, id) {\n      let url_id = id + '/'\n      makeUpdateRequest(this.URL_FUND + url_id, data)\n      setTimeout(() => {\n        this.save_loading = false\n        this.$emit('close', this.flow_fund)\n      }, 800)\n    },\n    load_edit_item() {\n      if (this.flowData) {\n        console.log(this.flowData)\n        for (let key in this.flowData) {\n          if (key in this.flow_fund)\n            this.flow_fund[key] = this.flowData[key]\n        }\n      }\n    },\n  },\n\n  created() {\n    this.getContracts()\n    this.load_edit_item()\n  },\n  computed: {\n    form_title() {\n      return this.edit === false ? 'Добавить движение средств' : 'Редактировать движение средств'\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}